{"version":3,"sources":["instructions.js","guess.js","guessGenerator.js","beginningObservation.js","App.js","serviceWorker.js","index.js"],"names":["Instructions","react_default","a","createElement","Guess","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","disabled","hypothesis","number1","number2","number3","feedback","feedbackVariant","handleInputChange","bind","assertThisInitialized","handleSubmit","ruleStated","setState","event","target","value","name","defineProperty","preventDefault","Number","isInteger","doNumbersConform","parseInt","Form_default","onSubmit","Group","controlId","Label","guessNumber","Control","required","type","placeholder","onChange","Row","Col_default","Button_default","variant","Alert_default","Component","GuessGenerator","numberOfGuesses","guesses","handleNewGuess","handleStateRule","React","createRef","_this2","concat","toConsumableArray","guess","key","ref","current","react","onClick","InputGroup_default","className","FormControl_default","Append","BeginningObservation","defaultValue","App","Container","instructions","beginningObservation","guessGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0d46af7b.chunk.js","sourcesContent":["import React from 'react'\n\nconst Instructions = () => (\n  <div>\n    <p>\n      In this task we are interested in how people think \"scientifically\" in a simulated experimental setting. You\n      will be given\n      an initial observation, three numbers which conform to a simple rule. Your task is to discover\n      this rule\n      by generating a possible rule (a hypothesis) and testing it with\n      your own set of three numbers.\n    </p>\n    <p>\n      Enter your guess about the rule together with your test\n      triple of numbers below. The only information that will be\n      provided is an indication of whether or\n      not your test triple conforms or does not conform to the rule.\n    </p>\n    <p>\n      The rule is concerned with a RELATION between any three\n      numbers and not with their absolute magnitude; so it is not a\n      rule like \"all numbers above (or below) 50\", etc. Keep in mind\n      that this is an arbitrary rule, one from an infinite set of rules\n      for which the given observation: (2, 4, 6) is a conforming instance.\n    </p>\n    <p>\n      You may continue as long as you wish to propose guesses\n      and tests of them with number triples. Continue until you have\n      proven to yourself that you know what the rule is. Only then,\n      AND NOT BEFORE, state this rule at the bottom.\n      Remember that the instruction \"to prove\" means to show that\n      your rule is the only true one.\n    </p>\n  </div>\n)\n\nexport default Instructions\n\n\n","import React, {Component} from 'react'\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Alert from \"react-bootstrap/Alert\";\n\nclass Guess extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      disabled: false,\n      hypothesis: '',\n      number1: '',\n      number2: '',\n      number3: '',\n      feedback: '',\n      feedbackVariant: ''\n    }\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.ruleStated = this.ruleStated.bind(this);\n  }\n\n  ruleStated() {\n    this.setState({disabled: true})\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    if (!Number.isInteger(+this.state.number1) ||\n      !Number.isInteger(+this.state.number2) ||\n      !Number.isInteger(+this.state.number3)) {\n      this.setState({feedback: 'Please enter 3 integers', feedbackVariant: 'warning'})\n    } else {\n      this.setState({disabled: true})\n      if (this.doNumbersConform(this.state.number1, this.state.number2, this.state.number3)) {\n        this.setState({feedback: 'Conforms', feedbackVariant: 'success'})\n      } else {\n        this.setState({feedback: 'Does not Conform', feedbackVariant: 'danger'})\n      }\n    }\n  }\n\n  doNumbersConform(number1, number2, number3) {\n    return (parseInt(number1) < parseInt(number2) && parseInt(number2) < parseInt(number3))\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <Form.Group controlId=\"hypothesis\">\n          <Form.Label>Hypothesis {this.props.guessNumber}:</Form.Label>\n          <Form.Control\n            required\n            type=\"text\"\n            name={'hypothesis'}\n            placeholder=\"Enter hypothesis\"\n            value={this.state.hypothesis}\n            onChange={this.handleInputChange}\n            disabled={this.state.disabled}\n          />\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>Numbers:</Form.Label>\n          <Form.Row>\n            <Col>\n              <Form.Control required type=\"text\"\n                            name={'number1'}\n                            value={this.state.number1}\n                            onChange={this.handleInputChange}\n                            disabled={this.state.disabled}/>\n            </Col>\n            <Col>\n              <Form.Control required type=\"text\"\n                            name={'number2'}\n                            value={this.state.number2}\n                            onChange={this.handleInputChange}\n                            disabled={this.state.disabled}/>\n            </Col>\n            <Col>\n              <Form.Control required type=\"text\"\n                            name={'number3'}\n                            value={this.state.number3}\n                            onChange={this.handleInputChange}\n                            disabled={this.state.disabled}/>\n            </Col>\n            <Col>\n              <Button variant=\"primary\" type=\"submit\" disabled={this.state.disabled || this.props.ruleStated}>\n                Submit\n              </Button>\n            </Col>\n          </Form.Row>\n        </Form.Group>\n        <Form.Group>\n          <Alert variant={this.state.feedbackVariant}>\n            {this.state.feedback}\n          </Alert>\n        </Form.Group>\n      </Form>\n    )\n  }\n}\n\nexport default Guess\n","import React, {Component, Fragment} from 'react'\nimport Guess from \"./guess\";\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport FormControl from \"react-bootstrap/FormControl\";\n\nclass GuessGenerator extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      numberOfGuesses: 0,\n      guesses: [],\n      ruleStated: false\n    }\n\n    this.handleNewGuess = this.handleNewGuess.bind(this);\n    this.handleStateRule = this.handleStateRule.bind(this);\n    this.ruleStated = React.createRef()\n  }\n\n  handleNewGuess() {\n    this.setState((state) => {\n      return {\n        numberOfGuesses: state.numberOfGuesses + 1,\n        guesses: [\n          ...state.guesses,\n          <Guess key={state.numberOfGuesses}\n                 guessNumber={state.numberOfGuesses + 1}\n                 ref={this.ruleStated}/>\n                 ]\n      }\n    })\n  }\n\n  handleStateRule() {\n    this.setState({ruleStated: true})\n    this.ruleStated.current.ruleStated()\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.guesses}\n        <Button name={'newGuess'} onClick={this.handleNewGuess} disabled={this.state.ruleStated}>\n          New guess\n        </Button>\n        <InputGroup className={\"mt-3 mb-5\"}>\n          <FormControl\n            type=\"text\"\n            disabled={this.state.ruleStated}\n            placeholder=\"Enter rule\"\n          />\n          <InputGroup.Append>\n            <Button name={'stateRule'} variant=\"outline-secondary\" onClick={this.handleStateRule}\n                    disabled={this.state.ruleStated}>\n              State rule\n            </Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Fragment>\n    )\n  }\n}\n\nexport default GuessGenerator\n","import React from 'react'\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Alert from \"react-bootstrap/Alert\";\n\nconst BeginningObservation = () => (\n  <Form>\n    <Form.Group controlId=\"hypothesis\">\n      <Form.Control\n        type=\"text\"\n        defaultValue='Beginning Observation'\n        disabled={true}\n      />\n    </Form.Group>\n    <Form.Group>\n      <Form.Label>Numbers:</Form.Label>\n      <Form.Row>\n        <Col>\n          <Form.Control required type=\"text\"\n                        defaultValue='2'\n                        disabled={true}/>\n        </Col>\n        <Col>\n          <Form.Control required type=\"text\"\n                        defaultValue='4'\n                        disabled={true}/>\n        </Col>\n        <Col>\n          <Form.Control required type=\"text\"\n                        defaultValue='6'\n                        disabled={true}/>\n        </Col>\n        <Col>\n          <Button variant=\"primary\" type=\"submit\" disabled={true}>\n            Submit\n          </Button>\n        </Col>\n      </Form.Row>\n    </Form.Group>\n    <Form.Group>\n      <Alert variant='success'>\n        Conforms\n      </Alert>\n    </Form.Group>\n  </Form>\n)\n\nexport default BeginningObservation\n\n","import React from 'react';\nimport Instructions from \"./instructions\";\nimport GuessGenerator from \"./guessGenerator\";\nimport {Container} from \"react-bootstrap\";\nimport BeginningObservation from \"./beginningObservation\";\n\nfunction App() {\n  return (\n    <Container className=\"App\">\n      <h1>Rule Discovery</h1>\n      <Instructions/>\n      <BeginningObservation/>\n      <GuessGenerator/>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}